{"ast":null,"code":"import { getQuizQuestions, quizCategories } from '../data/quizData';\n\n// Simule un délai d'API\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport const quizService = {\n  // Récupérer les catégories disponibles\n  async getCategories() {\n    await delay(500); // Simule la latence réseau\n    return Object.entries(quizCategories).map(([id, name]) => ({\n      id,\n      name\n    }));\n  },\n  // Récupérer les questions pour une catégorie donnée\n  async getQuestions(category, count = 10) {\n    await delay(1000); // Simule la latence réseau\n    return getQuizQuestions(category, count);\n  },\n  // Soumettre les résultats du quiz\n  async submitResults(results) {\n    await delay(800); // Simule la latence réseau\n    console.log('Résultats soumis:', results);\n    return {\n      success: true,\n      message: 'Résultats enregistrés avec succès'\n    };\n  }\n};","map":{"version":3,"names":["getQuizQuestions","quizCategories","delay","ms","Promise","resolve","setTimeout","quizService","getCategories","Object","entries","map","id","name","getQuestions","category","count","submitResults","results","console","log","success","message"],"sources":["/home/sidney-jordan/aviation-quiz-app/src/services/quizService.js"],"sourcesContent":["import { getQuizQuestions, quizCategories } from '../data/quizData';\n\n// Simule un délai d'API\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport const quizService = {\n  // Récupérer les catégories disponibles\n  async getCategories() {\n    await delay(500); // Simule la latence réseau\n    return Object.entries(quizCategories).map(([id, name]) => ({ id, name }));\n  },\n\n  // Récupérer les questions pour une catégorie donnée\n  async getQuestions(category, count = 10) {\n    await delay(1000); // Simule la latence réseau\n    return getQuizQuestions(category, count);\n  },\n\n  // Soumettre les résultats du quiz\n  async submitResults(results) {\n    await delay(800); // Simule la latence réseau\n    console.log('Résultats soumis:', results);\n    return {\n      success: true,\n      message: 'Résultats enregistrés avec succès'\n    };\n  }\n};"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,cAAc,QAAQ,kBAAkB;;AAEnE;AACA,MAAMC,KAAK,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;AAErE,OAAO,MAAMI,WAAW,GAAG;EACzB;EACA,MAAMC,aAAaA,CAAA,EAAG;IACpB,MAAMN,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAClB,OAAOO,MAAM,CAACC,OAAO,CAACT,cAAc,CAAC,CAACU,GAAG,CAAC,CAAC,CAACC,EAAE,EAAEC,IAAI,CAAC,MAAM;MAAED,EAAE;MAAEC;IAAK,CAAC,CAAC,CAAC;EAC3E,CAAC;EAED;EACA,MAAMC,YAAYA,CAACC,QAAQ,EAAEC,KAAK,GAAG,EAAE,EAAE;IACvC,MAAMd,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,OAAOF,gBAAgB,CAACe,QAAQ,EAAEC,KAAK,CAAC;EAC1C,CAAC;EAED;EACA,MAAMC,aAAaA,CAACC,OAAO,EAAE;IAC3B,MAAMhB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAClBiB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEF,OAAO,CAAC;IACzC,OAAO;MACLG,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE;IACX,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}